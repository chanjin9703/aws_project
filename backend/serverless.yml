org: chanjin
app: backend
service: backend
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  
  environment:
    USER_POOL: { Ref: UserPool }
    USER_POOL_CLIENT: { Ref: UserClient }
    USER_TABLE: ${self:service}-users-${sls:stage}
  
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
          - cognito-idp:AdminInitiateAuth
          - cognito-idp:AdminCreateUser
          - cognito-idp:AdminSetUserPassword
          - cognito-idp:AdminGetUser
          Resource: "*"
        - Effect: Allow
          Action:
          - 'dynamodb:PutItem'
          - 'dynamodb:Scan'
          - 'dynamodb:Query'
          - 'dynamodb:UpdateItem'
          - 'dynamodb:DeleteItem'
          Resource: "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-users-${sls:stage}"

resources:
  Resources:
    UserPool: 
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-pool-${sls:stage}
        Schema: 
          - Name: email
            Required: true
            Mutable: true
        Policies:
          PasswordPolicy: 
            MinimumLength: 6
        AutoVerifiedAttributes: ["email"]    
    UserClient: 
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:service}-client-${sls:stage}
        GenerateSecret: false
        UserPoolId: 
          Ref: UserPool
        AccessTokenValidity: 5
        IdTokenValidity: 5
        ExplicitAuthFlows: 
          - "ADMIN_NO_SRP_AUTH"
          
    UserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: users
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: N
        KeySchema:
          - AttributeName: email
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: Range
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
      

functions:
  register:
    handler: functions/register.register
    events:
      - httpApi:
          path: /register
          method: post
          
  hello:
    handler: handler.handler
    events:
      - httpApi:
          path: /
          method: post
  login:
    handler: functions/login.login
    events:
      - httpApi:
          path: /login
          method: post        
          



plugins:
  - serverless-offline
custom:
  serverless-offline:
    host: '0.0.0.0'
    port: 3004